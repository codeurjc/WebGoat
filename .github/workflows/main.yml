# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11  

      -  name: Build with Maven
         run: mvn clean install
      
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          cd webgoat-server
          docker build --build-arg webgoat_version=v8.1.0 -t webgoat/webgoat:8.1.0 .
          docker run -d --name webgoat webgoat/webgoat:8.1.0
          
      - name: OWASP ZAP Full Scan
      # You may pin to the exact commit or the version.
      # uses: zaproxy/action-full-scan@68d7520aa6d6171629a505cef70eb3c3c61ea0cd
        uses: zaproxy/action-full-scan@v0.2.0
        with:
          # GitHub Token to create issues in the repository
          #token: # optional, default is ${{ github.token }}
          # Target URL
          target: http://webgoat:8080/WebGoat
          
      - name: Teardown webgoat
        run: docker stop webgoat && docker rm webgoat
        
